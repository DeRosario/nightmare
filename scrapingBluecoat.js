// ===========================================================================//
//
// Author            :   Louis MILCENT <lmilcent@securiview.net>
// Creation Date     :   23-february-2017
//
// ===========================================================================//

try {
  var getConfig = require('./../../ressources/getConfig.js');
} catch (e) {
  console.log(' [scrapingBluecoat.js] Impossible de trouver ou d\'ouvrir le fichier "getConfig.js" : ' + e);
  process.exit(-1);
}

const WAIT_TIME_OUT = getConfig('scraping', 'wait_timeout');
const EXECUTION_TIME_OUT = getConfig('scraping', 'wait_execution_timeout');
const PATH_SCREENSHOTS = './debug/';

// Sraping config
const LOGIN_URL = 'https://support.symantec.com/content/unifiedweb/auth';
const EMAIL_SELECTOR = '#loginUsername';
const PASS_SELECTOR = '#loginPassword';
const SUBMIT_SELECTOR = '#signin_button';
const EMAIL =
  'email@domain.test';
const PASS =
  'P@ssw0rd!';
const WAIT_AFTER_LOGIN_SELECTOR = '#section-div-listitem2'; // Wait for "log out" button
const DOWNLOADS_PAGE = 'https://symantec.flexnetoperations.com/mellon/login?ReturnTo=/control/symc/home';
const WAIT_DOWNLOADS_PAGE = '#itraHomeViewRecentUploadFiles'
const SSL_VISIBILITY_URL = 'https://symantec.flexnetoperations.com/control/symc/product?plneID=759797';

//
//      Dependencies
//
try {
  var moment = require('../node_modules/moment');
  moment.locale('fr');
} catch (err) {
  console.log(' [scrapingBluecoat.js] Impossible de trouver le module "moment". Est-il installé ? Essayez "npm install moment" depuis le dossier contenant "package.json".');
  process.exit();
}
try {
  var fs = require('fs');
} catch (e) {
  console.log(' [scrapingBluecoat.js] Impossible de trouver le module "fs". Est-il installé ? Essayez "npm install" depuis le dossier contenant "package.json".');
  process.exit(-1);
}
// Create the debug folder if it doesn't exist
if (!fs.existsSync(PATH_SCREENSHOTS)) {
  fs.mkdirSync(PATH_SCREENSHOTS);
}

//
// Custom web scraping to get datas from a Security vulnerabilities page of cvedetails.com
//
// INPUT:      * An url: 'URL_1'
//              * callback (err, json)
//
//  OUTPUT:     * An object:
//                {
//                  name: 'bluecoat',                           // Static
//                  started: 'mardi 14 février 2017, 11:14:26'  // Generated by momentJS
//                  results: {
//                    product: 'SV1800',
//                    lastVersion: '4.0.1.1',
//                    description: 'SSL Visibility 4.0.1.1 SV1800',
//                    availability: 'GENERAL_AVAILABILITY',
//                    downloadUrl: 'https://bluecoat.flexnetoperations.com/control/blct/download?element=8534567',
//                    date: 'Feb 8, 2017',
//                    releaseNotes: 'Long text'
//                  }
//                  ended: 'mardi 14 février 2017, 11:24:38'    // Generated by momentJS
//                }
//
module.exports.start = function (callback) {
  //
  //  Test args
  //
  if (typeof callback !== 'function') {
    throw new Error(' [scrapingBluecoat.js] Callback incorrect.');
  }

  var results = {};
  results.name = 'bluecoat';
  results.started = moment().format('dddd DD MMMM YYYY, LTS');

  //
  //  Dependencies
  //
  try {
    var Nightmare = require('../node_modules/nightmare');
  } catch (err) {
    console.log(' [scrapingBluecoat.js] Impossible de trouver le module "nightmare". Est-il installé ? Essayez "npm install nightmare" depuis le dossier contenant "package.json".');
    process.exit();
  }
  var nightmare = Nightmare({
    show: false,
    typeInterval: 50,
    maxAuthRetries: 3,
    waitTimeout: WAIT_TIME_OUT,
    gotoTimeout: WAIT_TIME_OUT,
    executionTimeout: EXECUTION_TIME_OUT
  });

  //
  //  Start the webscraping & print logs
  //
  console.log('\n [scrapingBluecoat.js] Chargement de la page de login...');

  nightmare.on('console', console.log.bind(console));

  nightmare
    .viewport(1920, 1080)
    .goto(LOGIN_URL)
    .wait(EMAIL_SELECTOR)
    .screenshot(PATH_SCREENSHOTS + '/0_login_page.png')
    .evaluate(function () {
      console.log(' [scrapingBluecoat.js] Utilisation des indentifiants de connexion fournis.');
    })
    .type(EMAIL_SELECTOR, EMAIL)
    .type(PASS_SELECTOR, PASS)
    .screenshot(PATH_SCREENSHOTS + '/1_credentials_typed.png')
    .click(SUBMIT_SELECTOR)
    .screenshot(PATH_SCREENSHOTS + '/2_btn_clicked.png')
    .wait(WAIT_AFTER_LOGIN_SELECTOR)
    .screenshot(PATH_SCREENSHOTS + '/3_connection_success.png')
    .evaluate(function () {
      console.log(' [scrapingBluecoat.js] Connexion réussie, accès à la page des téléchargements.');
    })
    .goto(DOWNLOADS_PAGE)
    .screenshot(PATH_SCREENSHOTS + '/4_download_page.png')
    .wait(WAIT_DOWNLOADS_PAGE)
    .goto(SSL_VISIBILITY_URL)
    .screenshot(PATH_SCREENSHOTS + '/5_ssl_visibility_page.png')
    // Now get all informations
    .evaluate(function () {
      console.log(' [scrapingBluecoat.js] Récupération des résultats.');
      //
      //  Get the last available version information
      //
      var version = '';
      var description = '';
      var availability = '';
      var date = '';
      var downloadUrl = '';
      var product = '';

      try {
        version = document.querySelectorAll('#epProductListTable tbody tr td')[0].innerText.trim();
        description = document.querySelectorAll('#epProductListTable tbody tr')[0].getElementsByTagName('td')[2].getElementsByTagName('a')[0].innerText.trim();
        downloadUrl = document.querySelectorAll('#epProductListTable tbody tr')[0].getElementsByTagName('td')[2].getElementsByTagName('a')[0].href.trim();
        availability = document.querySelectorAll('#epProductListTable tbody tr')[0].getElementsByTagName('td')[2].getElementsByTagName('div')[0].innerText.trim();
        date = document.querySelectorAll('#epProductListTable tbody tr')[0].getElementsByTagName('td')[3].innerText.trim();
        product = document.querySelectorAll('#epProduct h2')[0].innerText.trim();
      } catch (e) {
        console.log(' [scrapingBluecoat.js] Impossible de récupérer les résultats (1) :');
        console.log(e);
        return;
      }

      //
      //  Get the last version release notes (get second version title position, then get all text between this title and the first version title)
      //
      var secondVersion = '';
      var firstVersion = '';
      var element = '';
      var releaseNotes = '';

      try {
        secondVersion = document.querySelectorAll('#epProduct .page-instructions .htm-content p span[style="text-decoration: underline;"]')[1];
        firstVersion = document.querySelectorAll('#epProduct .page-instructions .htm-content p span[style="text-decoration: underline;"]')[0].innerText;
        element = secondVersion.parentNode.previousSibling.previousSibling;
        releaseNotes = '';
      } catch (e) {
        console.log(' [scrapingBluecoat.js] Impossible de récupérer les résultats (2) :');
        console.log(e);
        return;
      }

      var i = 0;
      try {
        // "Infinite" loop, with maximum of 200 iterations
        for (i = 0; i < 200; i++) {
          // If it's the first version text, we have now all the release notes. Stop here
          if (element.innerText === firstVersion) {
            i = 200;

          // Else this is a part of the release notes
          } else {
            if (typeof (element.innerText) !== 'undefined') {
              releaseNotes = element.innerText + '<br/>' + releaseNotes;
            }

            // Previous element
            if ((typeof (element.previousSibling) !== 'undefined') && (element.previousSibling !== null)) {
              element = element.previousSibling;
            } else if ((typeof (element.previousSibling.previousSibling) !== 'undefined') && (element.previousSibling.previousSibling !== null)) {
              element = element.previousSibling.previousSibling;
            } else {
              i = 200;
            }
          }
        }
      } catch (e) {
        console.log(' [scrapingBluecoat.js] Impossible de récupérer les résultats (3), boucle n° ' + i + ' :\n ' + e);
        return;
      }
      //
      // Now create the final object
      //
      var obj = {};
      obj.product = product || '';
      obj.lastVersion = version || '';
      obj.description = description || '';
      obj.availability = availability || '';
      obj.downloadUrl = downloadUrl || '';
      obj.date = date || '';
      obj.releaseNotes = releaseNotes || '';

      return obj;
    })
    .end()
    .then(function (datas) {
      console.log(' [scrapingBluecoat.js] Web scraping terminé.');
      if ((typeof datas === 'object') && (datas !== null) && (Object.keys(datas).length >= 1)) {
        results.results = {};
        results.results = datas;
        results.ended = moment().format('dddd DD MMMM YYYY, LTS');
        return callback('', results);
      } else {
        return callback(' [scrapingBluecoat.js] Erreur lors du scraping, aucun résultat.');
      }
    })
    .catch(function (error) {
      console.log(' [scrapingSonicwall.js] Erreur lors du scraping : ');
      console.log(error);
      return callback(error);
    });
};
